CMD_LOAD256:	equ $05
CMD_REBOOT:		equ $01
CMD_CALL:		equ $80
CMD_WR_BOOT:	equ $C0
CMD_WR_ALL:		equ $C1 ; writes all data to disk.

load_loc:		equ bootsector_loc



flash_pgm:
	ld hl, load_loc
	ld (mem_idx), hl
.mainloop:
	jp .mainloop_clutch
db 0, "flash_pgm.mainloop_clutch", 0
.mainloop_clutch:
	call flash_chrin ; get input
	
	cp CMD_REBOOT
	jp z, .confirm_reboot
	
	cp CMD_LOAD256
	jp z, .load256
	
	cp CMD_CALL
	jp z, .call
	
	cp CMD_WR_BOOT
	jp z, .wrboot
	
	cp CMD_WR_ALL
	jp z, .wrall
	
	ld a, '?'
	call chrout
	jp flash_pgm
.load256:
	ld c, 0
	ld de, (mem_idx)
.ldlopen: ; 'lopen' means 'loop'
	push bc
	jp .ldlopen_clutch
db 0,"flash_pgm.ldlopen_clutch",0
.ldlopen_clutch:
	call flash_chrin
	ld (de), a
	inc de
	pop bc
	dec c
	
	jp nz, .ldlopen
	
	; loaded 256 bytes.  Now save the loading pointer.
	ld (mem_idx), de
	ld a, 'k'
	call chrout
	jp .mainloop
.call:
	call load_loc
	jp .mainloop
.wrboot:
	ld a, (bd_list_cnt)
	or a
	jp z, .error
	
	ld de, 0
	ld hl, (main_disk)
	call blockdevice.set_address
	
	ld de, load_loc
	call blockdevice.write
	
	jp .mainloop
.error:
	ld a, 'e'
	call chrout
	jp .mainloop
.wrall:
	ld a, (bd_list_cnt)
	or a
	jp z, .error
	
	ld de, 0
	ld hl, (main_disk)
	call blockdevice.set_address
	
	ld de, load_loc
	ld bc, load_loc
	ld a, (mem_idx+1)
	sub b
	ld b, a ; b is now the number of sectors to be written
	call chrout
.wr_lopen:
	call blockdevice.write
	ld a, d
	inc a
	ld d, a
	djnz .wr_lopen ; write b number of sectors
	
	ld a, 'k'
	call chrout
	
	jp .mainloop
.confirm_reboot:
	call flash_chrin
	cp CMD_REBOOT
	jp z, 0 ; jp 0 makes the computer reboot
	jp .mainloop

flash_chrin:
	push hl
.rest:
	ld hl, .deglitch
	call try
	call chrin
	push af
	call notry
	pop af
	pop hl
	ret
.deglitch:
	jp .rest