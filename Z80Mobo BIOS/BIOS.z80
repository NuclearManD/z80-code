;  Origionally from some old OS design I made.
; Then became MinOS
; Kernel reused in NTIOS 0.1
; Kernel heavily modified NTIOS 0.2
; @1903191502 Rewritten to be a BIOS instead
; Copyright Dylan Brophy 2017
;
org $0000
; CONFIGURATION

reboot: equ bios_start

BOOT_MAGIC: equ $6579

stack_top:     equ $FFFF

vectors:
	jp bios_start ; 0000 (reboot)
	jp print    ; 0003
	jp println  ; 0006
	jp alloc    ; 0009
	jp input	; 000C
	jp strcomp  ; 000F
	jp chrin	; 0012
	jp chrout	; 0015
	jp print_memory; 0018
	
	jp try		; 001B
	jp notry	; 001E
	jp throw	; 0021
	jp traceback; 0024
	nop
	jp len		; 0028
	jp blockdevice.read     ; 002B
	jp blockdevice.write     ; 002E
	jp blockdevice.set_address     ; 0031
	jp 0000     ; 0034
	nop			; 0037
	jp yield	; 0038, Z80 interrupt mode 1 vector

bios_start:
	di
	ld sp, stack_top
	ld hl, 0
	
	call memory_init
	
	call _uart_setup
	ld (term_inpipe), hl
	ld (term_outpipe), hl
	
	ld hl, .loadmsg
	call println
	
	call os_setup_tracer
	call init_pipe_list
	call init_bd_list
	call pipeserver_setup
	
	ld hl, (bd_list)
	ld (main_disk), hl
	
	
	; system should be completely set up at this point.
	
	ld hl, .lookingfordrivesmsg
	call println
	
	; first ensure that a valid disk exists (don't crash the computer)
	ld a, (bd_list_cnt)
	or a
	jp z, .no_disk
	
	ld de, 0
	ld hl, (main_disk)
	call blockdevice.set_address
	
	ld de, bootsector_loc				; read first sector
	call blockdevice.read
	
	ld hl, (bootsector_loc+254)
	scf
	ccf
	ld bc, BOOT_MAGIC
	sbc hl, bc
	jp z, .bootable
	
	ld hl, .noboot
	call println
	
.flash:
	ld hl, .flashmsg
	call println
	
	call flash_pgm
	
	halt
.no_disk:
	ld hl, .nodisk
	call println
	
	jp .flash
.bootable:
	ld hl, .booting
	call println
	
	call bootsector_loc ; BANG!
	
	ld hl, .bootret
	call println
	
	jp .flash
	

.testmsg: db "[Test Message]", 0
.loadmsg: db "Loading BIOS...",0
.donemsg: db "Done!", 0

.lookingfordrivesmsg:	db "Checking disks...",0
.noboot:				db "The disk is not bootable!", 0
.nodisk:				db "No disks installed!", 0
.flashmsg:				db "Flash interface automatically enabled.  Waiting for valid input...",0
.booting:				db "Booting from disk...", 0
.bootret:				db "Bootloader returned!", 0
	
	; allow user to select a terminal by iterating through pipes and
	; sending a login to each, then see which responds first.
autosel_terminal:
	ld de, .rqaccessmsg
	ld hl, pipe_list_cnt
	ld c, (hl)
	ld hl, pipe_list
.rq_access_loop:
	push hl
	ld a, (hl)
	inc hl
	ld h, (hl)
	ld l, a
	call pipe.println
	call pipe.clean
	pop hl
	dec c
	dec c
	jp z, .did_rq
	inc hl
	inc hl
	jp .rq_access_loop
.did_rq:
	; sent message, now just iterate through looking for a response.
	ld hl, pipe_list_cnt
	ld c, (hl)
	ld hl, pipe_list
.check_avail_loop:
	push hl
	ld a, (hl)
	inc hl
	ld h, (hl)
	ld l, a
	call pipe.available
	pop hl
	or a
	jp nz, .found_terminal
	dec c
	dec c
	jp z, .did_rq ; if we looped through all and none are available, try again.  Forever.  Because one day SOMEONE WILL PRESS DAT KEY!!!
	inc hl
	inc hl
	jp .check_avail_loop
.found_terminal:
	ld a, (hl)
	inc hl
	ld h, (hl)
	ld l, a
	ld (term_inpipe), hl
	ld (term_outpipe), hl
	ld a, (pipe_list_cnt)
	sub c
	rra
	and $1F
	call byte_to_hex
	ld d, h
	ld e, l
	ld hl, pipe_list_cnt
	ld c, (hl)
	ld hl, pipe_list
.term_selected_loop:
	push hl
	ld a, (hl)
	inc hl
	ld h, (hl)
	ld l, a
	push de
	ld de, .termselmsg
	call pipe.println
	pop de
	call pipe.println
	pop hl
	dec c
	dec c
	jp z, .term_selected
	inc hl
	inc hl
	jp .term_selected_loop
.term_selected:
	ld hl, .termactmsg
	call println
	ret
	
.rqaccessmsg: db "Press any key to activate this terminal.",0
.termactmsg: db "Terminal Activated.", 0
.termselmsg: db "Terminal was activated: ", 0
	
system_error:
	ld hl, bios_broken
	call try
	
	ld hl, $8000
	call print_memory
	ld hl, $8100
	call print_memory
	ld hl, $8200
	call print_memory
	call traceback
	ld a, 13
	call chrout
	ld hl, .msg
	call println
	call input
	jp 0
.msg: db "Computer will not recover, press enter to reboot.", 0
bios_broken:
	ld hl, .emergency
	call try
	
	ld hl, uart_pipe_obj ; switch back to UART pipe, in case it fixes the terminal (if that's even what's wrong...)
	ld (term_outpipe), hl
	ld (term_inpipe), hl
	
	ld hl, $8000
	call print_memory
	ld hl, $8100
	call print_memory
	ld hl, $a300
	call print_memory
	
	call traceback
.emergency:
	ld hl, .msg
	call _uart_println ; in case terminal IO is doomed
	halt
.msg: db "Serious BIOS Error.  Please reflash the bios and force reboot of machine.", 0

yield:
	push hl
	push af
	push de
	push bc
	push ix
	push iy
	;jp 55 ; lol
	
	pop iy
	pop ix
	pop bc
	pop de
	pop af
	pop hl
	ret

INCLUDE "string.z80"
INCLUDE "objutil.z80"
INCLUDE "uart.z80"
INCLUDE "memory.z80"
INCLUDE "ui.z80"
INCLUDE "traceback.z80"
INCLUDE "pipeserver.z80"
INCLUDE "upd7220.z80"
INCLUDE "flash.z80"
empty_str: db 0

heap_top:		equ $8002
tmp:			equ $8004
term_inpipe:	equ $8006
term_outpipe:	equ $8008
current_pipe:	equ $800A
catch_stack:	equ $8105
tmp_sp:			equ $8106
tmp_sp2:		equ $8108
catch_sp:		equ $8108
pipe_list_cnt:	equ $810A
pipe_list:		equ $810C
current_bd:		equ $8200 ; bd stands for Block Device
bd_list_cnt:	equ $8202
bd_list:		equ $8204
main_disk:		equ $8240
mem_idx:		equ $8242

disk_buffer:	equ $8300

bootsector_loc: equ $9000


BIOS_END: